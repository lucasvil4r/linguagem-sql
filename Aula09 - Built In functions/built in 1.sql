USE SQL_S2

--=================================================================
---FUNÇÕES QUE PODEMOS APLICAR EM STRINGS
--=================================================================

--DROP TABLE PESSOA
DROP TABLE IF EXISTS PESSOA
CREATE TABLE
PESSOA
(
ID_PESSOA INT IDENTITY(1,1),
NOME VARCHAR(700),
EMAIL VARCHAR(700),
CPF VARCHAR(15),
DATA_NASCIMENTO DATE,
TELEFONE VARCHAR(20),
SALARIO DECIMAL(10,2)
)

INSERT INTO PESSOA
(NOME,EMAIL,CPF,DATA_NASCIMENTO,TELEFONE,SALARIO)
VALUES
('RICARDO FELIPE SANTOS','ricardo@hotmail.com','3456789','1980-01-30','551122381923',5000.50),
(' ARNALDO FELIPE','ff@hotmail.com','111256789','1990-04-30','552222381923',5000.12),
('caio nascimento ','caionascimentofelipefelipe@hotmail.com','878670876','1999-01-30','551166681923',4000.20),
('LOREVAL silva Fernandes','lorelorefernandes@yahoo.com','456565565','1976-05-30','551197881923',5000.90),
(' Junior Ricardo','kaim@yahoo.com','90890898','1986-12-09','581155581923',15000.80),
(' Helio Lima ','kloikl@gmail.com','12434335','1996-05-08','551122381923',51000.90),
(' janice vaz','ssssssddddd@gmail.com','7676767','1991-03-17','531122381923',6000.50),
('Milton Fernandes','bnbnbnbn@gmail.com','9898989832','1990-02-12','511122381923',5000.17),
(' janice vaz',NULL,'7676767','1991-03-17',NULL,6000.50),
('Milton Fernandes',NULL,'9898989832','1990-02-12','511122381923',5000.17)

select * from pessoa
 
--UPPER E LOWER - MAIUSCULAS E MIUSCULAS
SELECT NOME,UPPER(NOME) [UPPER] FROM PESSOA   
SELECT NOME,LOWER(NOME) [LOWER] FROM PESSOA   
 

--LTRIM, RTRIM E TRIM - REMOVE ESPAÇOS NO INICIO E FIM DE UMA STRING
SELECT NOME,  LTRIM(NOME) [LTRIM] FROM PESSOA  
SELECT NOME,  RTRIM(NOME) [RTRIM] FROM PESSOA  
SELECT NOME,  TRIM(NOME) [TRIM]   FROM PESSOA  --***

--LEFT E RIGHT - PEGA UMA PARTE DE UM TEXTO
SELECT EMAIL,LEFT(EMAIL,5) [LEFT5],LEFT(EMAIL,9) [LEFT9]  FROM PESSOA --**
SELECT EMAIL,RIGHT(EMAIL,5) [RIGHT],RIGHT(EMAIL,9) [RIGHT9] FROM PESSOA --**
  
--SUBSTRING - COMEÇA NO CARACTER 5 E BUSCA MAIS 5 CARACTERES
SELECT EMAIL, SUBSTRING(EMAIL,5,5) [SUBSTRING] FROM PESSOA --**
SELECT TELEFONE,SUBSTRING(TELEFONE,3,2)DDD FROM PESSOA   --**

--LEN - TAMANHO DO CAMPO
SELECT CPF, LEN(CPF) [LEN] FROM PESSOA --**

--REVERSE - INVERTE A STRING
SELECT CPF, REVERSE(CPF) [REVERSE_CPF],NOME, REVERSE(NOME) RNOME FROM PESSOA

--CONCAT - CONCATENA
SELECT CONCAT('O CPF DO CLIENTE ',NOME,' É ', CPF,ID_PESSOA) CONCATENAÇÃO FROM PESSOA --**
 
--REPLACE - SUBSTITUI UMA PARTE DO TEXTO POR OUTRA (coluna,antigo,novo)
SELECT EMAIL,
REPLACE(EMAIL,'.com','.com.br')email_replace,
NOME,
REPLACE(NOME,'A','@') NOME_ARROBA,
REPLACE(NOME,'O','0') NOME_ZERO,
REPLACE(REPLACE(REPLACE(NOME,'O','0'),'A','@'),'i','!') NOME_ZERO_ARROBA
FROM PESSOA
 

--REPLICATE - REPLICA UM VALOR OU UM CAMPO, QUANTAS VEZES VOCE DECIDIR
SELECT 
ID_PESSOA,
REPLICATE(ID_PESSOA,2) ID_PESSOA2X,
REPLICATE(ID_PESSOA,5) ID_PESSOA5X,
REPLICATE('ABC',2) ABC2X,
REPLICATE('ABC',20) ABC20X
FROM PESSOA
--CPF 


--CHARINDEX - BUSCA UM CARACTER EM UMA STRING
SELECT 
NOME,
CHARINDEX('A',NOME) BUSCA_A,
EMAIL,
CHARINDEX('@',EMAIL) BUSCA_ARROBA,
CHARINDEX('.',EMAIL) BUSCA_PONTO,
CHARINDEX('@',EMAIL)-1,--**
LEFT(EMAIL,CHARINDEX('@',EMAIL)-1) USUARIO
FROM PESSOA

--PARSENAME - DIVIDA UMA STRING EM COLUNAS, PARA CADA PONTO(".")
SELECT 
 PARSENAME('SQL_S2.DBO.PESSOA',1) TABELA
,PARSENAME('SQL_S2.DBO.PESSOA',2) [SCHEMA]
,PARSENAME('SQL_S2.DBO.PESSOA',3) BANCO_DADOS 
,PARSENAME('aaa.SQL_S2.DBO.PESSOA',4) BANCO_DADOS 
 
 
 SELECT NOME,REPLACE(TRIM(NOME),' ','.'),
 PARSENAME(REPLACE(TRIM(NOME),' ','.'),1) ULTIMO_NOME,
  PARSENAME(REPLACE(TRIM(NOME),' ','.'),2) meio_NOME,
   PARSENAME(REPLACE(TRIM(NOME),' ','.'),3) primeiro_NOME FROM PESSOA
 
 
------------------------COMBINAÇÕES DE FUNÇÕES!! -------------------------------------
 
SELECT 
UPPER(TRIM(NOME)) NOME_SEM_ESPACO_MAISCULO, 
CHARINDEX(' ',TRIM(NOME)) BUSCA_PRIMEIRO_ESPACO_REAL,  
SUBSTRING(TRIM(NOME),0,CHARINDEX(' ',TRIM(NOME))) PRIMEIRO_NOME,  
UPPER(SUBSTRING(TRIM(NOME),0,CHARINDEX(' ',TRIM(NOME)))) PRIMEIRO_NOME_MAIUSCULA
FROM PESSOA

--REPLACE É OTIMO PARA SUBSTITUIR "CORINGAS" E UMA STRING 
DECLARE @VARIAVEL VARCHAR(MAX) = ' O NOME DO CLIENTE É #NOME' 
DECLARE @VARIAVEL2 VARCHAR(MAX) = ' O NOME DO CLIENTE É #NOME E O EMAIL É #EMAIL' 
SELECT 
REPLACE(@VARIAVEL,'#NOME',NOME) NOME_DO_CLIENTE,
REPLACE(@VARIAVEL,'#NOME',UPPER(NOME)) NOME_DO_CLIENTE,
REPLACE(REPLACE(@VARIAVEL2,'#NOME',UPPER(NOME)),'#EMAIL',EMAIL) NOME_DO_CLIENTE_EMAIL
FROM PESSOA

--REPLICATE PARA PADRONIZAR CPF: PRECISAMOS TER 11 DIGITOS NO CPF, OS QUE TEM MENOS DE 11 VAMOS PREENCHER COM 0
SELECT 
CPF,
LEN(CPF) TAMANHO_CPF,
11- LEN(CPF) TAMANHO_PARA_COMPLETAR,
REPLICATE('0',11 - LEN(CPF)) [0_FALTANDO],
CONCAT(REPLICATE('0',11 - LEN(CPF)), CPF) CPF_PADRAO
FROM PESSOA

--=================================================================
---FUNÇÕES QUE PODEMOS APLICAR EM DATAS
--=================================================================
 
--DAY,MONTH,YEAR --BUSCA ANO, MES E DIA
SELECT 
DATA_NASCIMENTO,
DAY(DATA_NASCIMENTO)DIA, --BUSCA DIA
MONTH(DATA_NASCIMENTO)MES, --BUSCA MES
YEAR(DATA_NASCIMENTO)ANO
FROM PESSOA   

--DATEPART - BUSCA PARTE DE UMA DATA
SELECT 
DATA_NASCIMENTO,
DATEPART(QUARTER,DATA_NASCIMENTO) TRIMESTRE, --BUSCA TRIMESTRE
DATEPART(WEEKDAY,DATA_NASCIMENTO) DIA_SEMANA, --BUSCA DIA SEMANA
DATEPART(WEEK,DATA_NASCIMENTO) SEMANA,  --BUSCA SEMANA]
DATEPART(dd,DATA_NASCIMENTO) SEMANA  --BUSCA SEMANA
FROM PESSOA --BUSCA ANO


 

 

--DATEDIFF - DIFERENÇA DE DATAS
SELECT 
DATA_NASCIMENTO,
DATEDIFF(YEAR,DATA_NASCIMENTO,GETDATE()) IDADE, --DIFERENCA DE DATAS,ENTRE NASCIMENTO E DATA DE HOJE --***
DATEDIFF(YEAR,DATA_NASCIMENTO,'2001-09-11') IDADE_11_SETEMBRO  --DIFERENCA DE DATAS,ENTRE NASCIMENTO E DATA DE HOJE --***
FROM PESSOA
 
--DATEADD - ADICIONA PERIODOS EM UMA DATA --**
SELECT 
DATA_NASCIMENTO,
DATEADD(MONTH,12,DATA_NASCIMENTO) ANIVERSARIO_UM_ANO_IDADE, 
DATEADD(YEAR,100,DATA_NASCIMENTO) ANIVERSARIO_CEM_ANO_IDADE  ,
DATEADD(DAY,-1,DATA_NASCIMENTO) VESPERA_NASCIMENTO  
FROM PESSOA

--EOMONTH - BUSCA O ULTIMO DIA DO MES DA DATA
SELECT 
DATA_NASCIMENTO,
EOMONTH(DATA_NASCIMENTO) ULTIMO_DIA_MES_NASCIMENTO,
EOMONTH(GETDATE()) ULTIMO_DIA_MES
FROM PESSOA

--DATENAME - BUSCA O NOME DE UMA PARTE DA DATA (GERALMENTE PARA MES)
SELECT 
DATA_NASCIMENTO,
DATENAME(MONTH,DATA_NASCIMENTO) MES_NASCIMENTO,
DATENAME(MONTH,GETDATE()) MES_HOJE,
DATEFROMPARTS(2020,1,1) CRIA_DATA
FROM PESSOA

--=================================================================
---FUNÇÕES DE CONVERSÃO
--=================================================================

--CONVERT - CONVERTE DADOS DE UM TIPO PARA O OUTRO,  UTILIZA ENGINE DO SQL
SELECT 
DATA_NASCIMENTO,
CONVERT(VARCHAR(100),DATA_NASCIMENTO,103) DT_PT,
CONVERT(BIGINT,CPF) CPF_INTEIRO,
CONVERT(BIGINT,CPF)/2 CPF_INTEIRO_DIVIDO_2
FROM PESSOA
 
--CAST - CONVERTE DADOS DE UM TIPO PARA O OUTRO,  ANSI (NORMAS AMERICANAS)
SELECT 
DATA_NASCIMENTO,
CAST (ID_PESSOA AS VARCHAR(1)) ID_PESSOAS_CAST,
CAST (DATA_NASCIMENTO AS VARCHAR(100)) DATA_NASCIMENTO_CAST,
-- ID_PESSOA +  DATA_NASCIMENTO -- IRÁ DAR ERRO
' O ID PESSOA : ' + CAST (ID_PESSOA AS VARCHAR(1)) + ' NASCEU EM ' + CAST (DATA_NASCIMENTO AS VARCHAR(100)) CONCATENA_ID_NASCEU
FROM PESSOA

 

--=================================================================
---FUNÇÕES QUE PODEMOS APLICAR EM NUMÉRICOS
--=================================================================

-- CEILING - ARREDONDA PRA CIMA
SELECT CEILING(SALARIO)[CEILING],SALARIO FROM PESSOA

-- FLOOR - ARREDONDA PRA BAIXO
SELECT FLOOR(SALARIO)[FLOOR] FROM PESSOA

-- POWER - POTENCIA
SELECT SALARIO,POWER(SALARIO,2)[POWER] FROM PESSOA

-- SQRT - RAIZ QUADRADA
SELECT SALARIO,SQRT(SALARIO)[SQRT] FROM PESSOA

--RAND,ROUND - RANDOMICO E ARREDONDA 
SELECT RAND() RANDOMICO,SALARIO,ROUND(SALARIO,1)[ROUND] FROM PESSOA
 
 ---SELECT LEFT(NOME,5),NOME FROM PESSOA
--=================================================================
---FUNÇÕES LÓGICAS
--=================================================================
--CASE - CASO ALGUMA COISA ENTÃO... *****************
SELECT SALARIO, 
CASE 
	WHEN SALARIO < 5000  THEN 'MENOS QUE 5000'  
	WHEN SALARIO >5000 AND SALARIO < 6000 THEN 'ENTRE 5000 E 6000'
	ELSE 'MAIOR QUE 6000' END FAIXA_SALARIAL,
	TELEFONE,
CASE
LEFT(TELEFONE,4)
	WHEN 55 THEN 'BRASIL'
	WHEN 01 THEN 'EUA'
	WHEN 53 THEN 'IRLANDA'
	ELSE 'MUNDO' END FLG_PAIS
FROM PESSOA

--IIF -- SE TRUE, UM VALOR,  FALSO OUTRO VALOR
SELECT  
DATA_NASCIMENTO,
DATEDIFF(YEAR,DATA_NASCIMENTO,GETDATE()) IDADE,
IIF(DATEDIFF(YEAR,DATA_NASCIMENTO,GETDATE())<40,'JOVEM','MADURO') ,
SALARIO,
IIF(SALARIO< 5000,1,0) FLG_MENOR_5K
FROM PESSOA

--=================================================================
---FUNÇÕES PARA NULOS
--=================================================================
--ISNULL - SE FOR NULO..PREENCHA COM A SEGUNDA OPÇÃO ********************
SELECT NOME,EMAIL,TELEFONE,
ISNULL(EMAIL,'EMAIL NÃO INFORMARDO') EMAIL_T ,
ISNULL(EMAIL,TELEFONE) CONTATO
FROM PESSOA

--COALESCE - SE FOR NULO..PREENCHA COM A SEGUNDA OPÇÃO, TERCEIRA, ETC
SELECT EMAIL,TELEFONE,
COALESCE(EMAIL,'EMAIL NÃO INFORMARDO') EMAIL_T ,
COALESCE(EMAIL,TELEFONE,'NÃO POSSUI CONTATO') CONTATO
FROM PESSOA

--NULLIF 
SELECT CPF,NULLIF(CPF,'7676767') ANULA FROM PESSOA

SELECT NULLIF(DATA_NASCIMENTO,'1980-01-30') INFO, * FROM PESSOA
 
 
--=================================================================
---FUNÇÕES PARA CLASSIFICACAO
--=================================================================

--RANK - CRIA UM RANK ORDENADO POR UMA COLUNA OU MAIS. REPETE EM CASO DE EMPATE
SELECT *,RANK() OVER (ORDER BY SALARIO) RANKING ,
RANK() OVER (ORDER BY SALARIO DESC,TELEFONE) RANKING_MAIOR_P_MENOR
FROM PESSOA 
ORDER BY RANKING_MAIOR_P_MENOR

--RANK - CRIA UM RANK ORDENADO POR UMA COLUNA OU MAIS. REPETE EM CASO DE EMPATE
SELECT *,DENSE_RANK() OVER (ORDER BY SALARIO) RANKING ,
DENSE_RANK() OVER (ORDER BY SALARIO DESC,TELEFONE) RANKING_MAIOR_P_MENOR
FROM PESSOA 
ORDER BY RANKING


--ROW_NUMBER - CRIA UM RANK ORDENADO POR UMA COLUNA OU MAIS. NÃO REPETE EM CASO DE EMPATE, ÓTIMO PARA DEDUPLICAR
SELECT ID_PESSOA,CPF,NOME,SALARIO,ROW_NUMBER() OVER (ORDER BY SALARIO DESC, NOME) ROW1,
ROW_NUMBER() OVER (PARTITION BY CPF ORDER BY ID_PESSOA DESC) ROW2
INTO #CPF_DUPLICADO
 FROM PESSOA ORDER BY CPF,ROW2
 
 DELETE FROM PESSOA WHERE ID_PESSOA IN (
 SELECT ID_PESSOA FROM #CPF_DUPLICADO WHERE ROW2 > 1
 )
 
 
 