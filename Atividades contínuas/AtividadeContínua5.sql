USE atividade_continua_5;

-- Exercicio1

CREATE VIEW chamados_abertos AS
SELECT	
FUNCIONARIO.NOME,
FUNCIONARIO.MATRICULA,
CHAMADO.ABERTURA,
PRIORIDADE.SLA_HORAS,
DATEDIFF (hour, CHAMADO.ABERTURA, GETDATE()) as 'diferença em horas da data da abertura para a data atual'
FROM CHAMADO
JOIN FUNCIONARIO
ON CHAMADO.ID_SOLICITANTE = FUNCIONARIO.ID_FUNCIONARIO
JOIN PRIORIDADE
ON CHAMADO.ID_PRIORIDADE = PRIORIDADE.ID_PRIORIDADE
WHERE CHAMADO.FECHAMENTO IS NOT NULL
;

SELECT * FROM chamados_abertos

-- Exercicio2

SELECT 
SUM([CUSTO]) as 'Somatória de custo do chamado',
SUM(DATEDIFF (hour, ABERTURA, GETDATE())) as 'Somatória da diferença em horas da abertura para o fechamento'
FROM [atividade_continua_5].[dbo].[CHAMADO]
JOIN CATEGORIA
ON CHAMADO.ID_CATEGORIA = CATEGORIA.ID_CATEGORIA
WHERE FECHAMENTO IS NOT NULL
GROUP BY CATEGORIA.CATEGORIA
;

-- Exercicio3

CREATE FUNCTION chamado_dep (
    @departamento varchar(500)
)
RETURNS TABLE
AS
RETURN
    SELECT 
	SUM(ID_CHAMADO) as 'Contagem de chamados',
	SUM(DATEDIFF (hour, ABERTURA, FECHAMENTO)) as 'Somatória da diferença em horas da abertura para o fechamento'
	FROM [atividade_continua_5].[dbo].[CHAMADO]
	JOIN FUNCIONARIO
	ON CHAMADO.ID_SOLICITANTE = FUNCIONARIO.ID_FUNCIONARIO
	JOIN DEPARTAMENTO
	ON DEPARTAMENTO.ID_DEPARTAMENTO = FUNCIONARIO.ID_DEPARTAMENTO
	GROUP BY DEPARTAMENTO.NOME
	HAVING DEPARTAMENTO.NOME = @departamento

SELECT *
FROM   chamado_dep ('COMERCIAL')

-- Exercicio4

CREATE TABLE chamados_diretoria (
	ID_CHAMADO_DIRETORIA INT PRIMARY KEY IDENTITY(1,1),
	NOME VARCHAR(200),
	ABERTURA DATETIME,
	FECHAMENTO DATETIME,
	PRIORIDADE VARCHAR(200),
);

INSERT INTO chamados_diretoria (NOME,ABERTURA,FECHAMENTO,PRIORIDADE) VALUES 
('LINDA MIGUEL','1986-01-01','2020-01-01','BAIXO'),
('LEANDRO LIN','1986-07-10','2020-02-01','MEDIO'),
('FELIPE ALMEIDA','1985-08-01','2020-02-01','MEDIO'),
('CARLOS GRIT','1999-09-02','2020-02-01','ALTO'),
('FELIPE JANI','1985-08-01','2020-02-02','ALTO'),
('MARIA EUGENIA','1969-09-02','2020-02-02','BAIXO');

SELECT * FROM chamados_diretoria;

-- Exercicio5

CREATE FUNCTION funcao_escalar(
  @quantidade INT,
  @sla_horas INT
)
RETURNS VARCHAR(500)
AS 
BEGIN
  DECLARE @retorno VARCHAR(500)
  SELECT @retorno =
    CASE
		WHEN @quantidade < @sla_horas THEN 'dentro do sla'
		WHEN @quantidade = @sla_horas THEN 'limite sla'
		ELSE 'fora do sla'
    END 
  FROM [PRIORIDADE] 
  RETURN @retorno
END;

SELECT dbo.funcao_escalar (30,24)

-- Exercicio6

SELECT 
	CHAMADO.ID_ATENDENTE,
	CATEGORIA.CATEGORIA,
	PRIORIDADE.PRIORIDADE,
	COUNT(CHAMADO.ID_CHAMADO) as 'Contagem de chamados'
FROM CHAMADO
	JOIN CATEGORIA
ON CHAMADO.ID_CATEGORIA = CATEGORIA.ID_CATEGORIA
	JOIN PRIORIDADE
ON CHAMADO.ID_PRIORIDADE = PRIORIDADE.ID_PRIORIDADE
	JOIN FUNCIONARIO
ON CHAMADO.ID_SOLICITANTE = FUNCIONARIO.ID_FUNCIONARIO
	JOIN DEPARTAMENTO
ON DEPARTAMENTO.ID_DEPARTAMENTO = FUNCIONARIO.ID_DEPARTAMENTO
WHERE DEPARTAMENTO.NOME = 'Diretoria'
GROUP BY CHAMADO.ID_ATENDENTE, CATEGORIA.CATEGORIA, PRIORIDADE.PRIORIDADE;

-- Exercicio7

SELECT 
	FUNCIONARIO.NOME,
	CATEGORIA.CATEGORIA,
	PRIORIDADE.PRIORIDADE,
	COUNT(CHAMADO.ID_CHAMADO) as 'Contagem de chamados'
FROM CHAMADO
	JOIN FUNCIONARIO
ON FUNCIONARIO.ID_FUNCIONARIO = CHAMADO.ID_SOLICITANTE
	JOIN CATEGORIA
ON CHAMADO.ID_CATEGORIA = CATEGORIA.ID_CATEGORIA
	JOIN PRIORIDADE
ON CHAMADO.ID_PRIORIDADE = PRIORIDADE.ID_PRIORIDADE
WHERE CHAMADO.FECHAMENTO IS NOT NULL AND PRIORIDADE.PRIORIDADE = 'ALTO'
GROUP BY FUNCIONARIO.NOME, CATEGORIA.CATEGORIA, PRIORIDADE.PRIORIDADE;

-- Exercicio8

SELECT 
	YEAR ( ABERTURA ) as ANO, 
	MONTH ( ABERTURA ) as MÊS,
	DAY ( ABERTURA ) as DIA,
	COUNT ( ID_CHAMADO ) as 'Somatória da quantidade de chamados'
FROM
	CHAMADO
GROUP BY YEAR ( ABERTURA ), MONTH ( ABERTURA ), DAY ( ABERTURA );
